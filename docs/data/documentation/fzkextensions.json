{
  "abstract" : [
    {
      "text" : "A collection of small extensions and custom operators.",
      "type" : "text"
    }
  ],
  "hierarchy" : {
    "paths" : [
      [

      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/FzkExtensions\/documentation\/FzkExtensions"
  },
  "kind" : "symbol",
  "metadata" : {
    "externalID" : "FzkExtensions",
    "modules" : [
      {
        "name" : "FzkExtensions"
      }
    ],
    "role" : "collection",
    "roleHeading" : "Framework",
    "symbolKind" : "module",
    "title" : "FzkExtensions"
  },
  "schemaVersion" : {
    "major" : 0,
    "minor" : 3,
    "patch" : 0
  },
  "sections" : [

  ],
  "topicSections" : [
    {
      "anchor" : "Date",
      "identifiers" : [
        "doc:\/\/FzkExtensions\/documentation\/FzkExtensions\/Date+ISO8601WithFractionalSeconds",
        "doc:\/\/FzkExtensions\/documentation\/FzkExtensions\/Foundation\/Date\/init(iso8601:)",
        "doc:\/\/FzkExtensions\/documentation\/FzkExtensions\/Foundation\/Date\/iso8601",
        "doc:\/\/FzkExtensions\/documentation\/FzkExtensions\/Foundation\/JSONDecoder\/DateDecodingStrategy\/iso8601WithFractionalSeconds",
        "doc:\/\/FzkExtensions\/documentation\/FzkExtensions\/Foundation\/JSONEncoder\/DateEncodingStrategy\/iso8601WithFractionalSeconds"
      ],
      "title" : "Date"
    },
    {
      "anchor" : "Optional",
      "identifiers" : [
        "doc:\/\/FzkExtensions\/documentation\/FzkExtensions\/Swift\/Optional\/unwrap()",
        "doc:\/\/FzkExtensions\/documentation\/FzkExtensions\/Swift\/Optional\/unwrap(orThrow:)",
        "doc:\/\/FzkExtensions\/documentation\/FzkExtensions\/UnwrapError"
      ],
      "title" : "Optional"
    },
    {
      "anchor" : "Collection-Array-ArraySlice-",
      "identifiers" : [
        "doc:\/\/FzkExtensions\/documentation\/FzkExtensions\/Swift\/Collection\/subscript(safe:)"
      ],
      "title" : "Collection (Array, ArraySlice, …)"
    },
    {
      "anchor" : "RangeReplaceableCollection-Array-ArraySlice-",
      "identifiers" : [
        "doc:\/\/FzkExtensions\/documentation\/FzkExtensions\/Swift\/RangeReplaceableCollection\/removing(at:)"
      ],
      "title" : "RangeReplaceableCollection (Array, ArraySlice, …)"
    },
    {
      "anchor" : "Sequence-Array-ArraySlice-",
      "identifiers" : [
        "doc:\/\/FzkExtensions\/documentation\/FzkExtensions\/Swift\/Sequence\/sorted(by:)",
        "doc:\/\/FzkExtensions\/documentation\/FzkExtensions\/Swift\/Sequence\/sorted(by:using:)"
      ],
      "title" : "Sequence (Array, ArraySlice, …)"
    },
    {
      "anchor" : "Operators",
      "generated" : true,
      "identifiers" : [
        "doc:\/\/FzkExtensions\/documentation\/FzkExtensions\/__(_:_:)-6eyg3",
        "doc:\/\/FzkExtensions\/documentation\/FzkExtensions\/__(_:_:)-7cl90",
        "doc:\/\/FzkExtensions\/documentation\/FzkExtensions\/__=(_:_:)",
        "doc:\/\/FzkExtensions\/documentation\/FzkExtensions\/~(_:_:)"
      ],
      "title" : "Operators"
    }
  ],
  "variants" : [
    {
      "paths" : [
        "\/documentation\/fzkextensions"
      ],
      "traits" : [
        {
          "interfaceLanguage" : "swift"
        }
      ]
    }
  ]
, 
"references": {
"doc://FzkExtensions/documentation/FzkExtensions": {
  "abstract" : [
    {
      "text" : "A collection of small extensions and custom operators.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/FzkExtensions\/documentation\/FzkExtensions",
  "kind" : "symbol",
  "role" : "collection",
  "title" : "FzkExtensions",
  "type" : "topic",
  "url" : "\/documentation\/fzkextensions"
},
"doc://FzkExtensions/documentation/FzkExtensions/Date+ISO8601WithFractionalSeconds": {
  "abstract" : [
    {
      "text" : "Extensions to ",
      "type" : "text"
    },
    {
      "code" : "Date",
      "type" : "codeVoice"
    },
    {
      "text" : ", ",
      "type" : "text"
    },
    {
      "code" : "JSONEncoder",
      "type" : "codeVoice"
    },
    {
      "text" : " and ",
      "type" : "text"
    },
    {
      "code" : "JSONDecoder",
      "type" : "codeVoice"
    },
    {
      "text" : " for transforming between ISO 8601-formatted dates and ",
      "type" : "text"
    },
    {
      "code" : "Date",
      "type" : "codeVoice"
    },
    {
      "text" : " objects, while preserving fractional seconds.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/FzkExtensions\/documentation\/FzkExtensions\/Date+ISO8601WithFractionalSeconds",
  "kind" : "article",
  "role" : "article",
  "title" : "Handle fractional seconds when encoding\/decoding Date in JSON",
  "type" : "topic",
  "url" : "\/documentation\/fzkextensions\/date+iso8601withfractionalseconds"
},
"doc://FzkExtensions/documentation/FzkExtensions/Foundation/Date/init(iso8601:)": {
  "abstract" : [
    {
      "text" : "Parses the passed-in value according to the",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "identifier" : "https:\/\/www.iso.org\/iso-8601-date-and-time-format.html",
      "isActive" : true,
      "type" : "reference"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "and ",
      "type" : "text"
    },
    {
      "identifier" : "https:\/\/www.ietf.org\/rfc\/rfc3339",
      "isActive" : true,
      "type" : "reference"
    },
    {
      "text" : " standards.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "identifier",
      "text" : "init"
    },
    {
      "kind" : "text",
      "text" : "?("
    },
    {
      "kind" : "externalParam",
      "text" : "iso8601"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:SS",
      "text" : "String"
    },
    {
      "kind" : "text",
      "text" : ")"
    }
  ],
  "identifier" : "doc:\/\/FzkExtensions\/documentation\/FzkExtensions\/Foundation\/Date\/init(iso8601:)",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "init(iso8601:)",
  "type" : "topic",
  "url" : "\/documentation\/fzkextensions\/foundation\/date\/init(iso8601:)"
},
"doc://FzkExtensions/documentation/FzkExtensions/Foundation/Date/iso8601": {
  "abstract" : [
    {
      "text" : "Formats the date according to the ",
      "type" : "text"
    },
    {
      "identifier" : "https:\/\/www.iso.org\/iso-8601-date-and-time-format.html",
      "isActive" : true,
      "type" : "reference"
    },
    {
      "text" : " and ",
      "type" : "text"
    },
    {
      "identifier" : "https:\/\/www.ietf.org\/rfc\/rfc3339",
      "isActive" : true,
      "type" : "reference"
    },
    {
      "text" : " standards.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "var"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "iso8601"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:SS",
      "text" : "String"
    }
  ],
  "identifier" : "doc:\/\/FzkExtensions\/documentation\/FzkExtensions\/Foundation\/Date\/iso8601",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "iso8601",
  "type" : "topic",
  "url" : "\/documentation\/fzkextensions\/foundation\/date\/iso8601"
},
"doc://FzkExtensions/documentation/FzkExtensions/Foundation/JSONDecoder/DateDecodingStrategy/iso8601WithFractionalSeconds": {
  "abstract" : [
    {
      "text" : "A strategy that formats dates according to the ISO 8601 standard, including support for fractional seconds.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "static"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "keyword",
      "text" : "let"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "iso8601WithFractionalSeconds"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:10Foundation11JSONDecoderC",
      "text" : "JSONDecoder"
    },
    {
      "kind" : "text",
      "text" : "."
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:10Foundation11JSONDecoderC20DateDecodingStrategyO",
      "text" : "DateDecodingStrategy"
    }
  ],
  "identifier" : "doc:\/\/FzkExtensions\/documentation\/FzkExtensions\/Foundation\/JSONDecoder\/DateDecodingStrategy\/iso8601WithFractionalSeconds",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "iso8601WithFractionalSeconds",
  "type" : "topic",
  "url" : "\/documentation\/fzkextensions\/foundation\/jsondecoder\/datedecodingstrategy\/iso8601withfractionalseconds"
},
"doc://FzkExtensions/documentation/FzkExtensions/Foundation/JSONEncoder/DateEncodingStrategy/iso8601WithFractionalSeconds": {
  "abstract" : [
    {
      "text" : "A strategy that formats dates according to the ISO 8601 and RFC 3339 standards, including support for fractional seconds.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "static"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "keyword",
      "text" : "let"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "iso8601WithFractionalSeconds"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:10Foundation11JSONEncoderC",
      "text" : "JSONEncoder"
    },
    {
      "kind" : "text",
      "text" : "."
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:10Foundation11JSONEncoderC20DateEncodingStrategyO",
      "text" : "DateEncodingStrategy"
    }
  ],
  "identifier" : "doc:\/\/FzkExtensions\/documentation\/FzkExtensions\/Foundation\/JSONEncoder\/DateEncodingStrategy\/iso8601WithFractionalSeconds",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "iso8601WithFractionalSeconds",
  "type" : "topic",
  "url" : "\/documentation\/fzkextensions\/foundation\/jsonencoder\/dateencodingstrategy\/iso8601withfractionalseconds"
},
"doc://FzkExtensions/documentation/FzkExtensions/Swift/Collection/subscript(safe:)": {
  "abstract" : [
    {
      "text" : "Safely returns the element at the given index, or nil if the index is out of bounds.",
      "type" : "text"
    }
  ],
  "conformance" : {
    "availabilityPrefix" : [
      {
        "text" : "Available when",
        "type" : "text"
      }
    ],
    "conformancePrefix" : [
      {
        "text" : "Conforms when",
        "type" : "text"
      }
    ],
    "constraints" : [
      {
        "code" : "Self",
        "type" : "codeVoice"
      },
      {
        "text" : " is ",
        "type" : "text"
      },
      {
        "code" : "Collection",
        "type" : "codeVoice"
      },
      {
        "text" : ".",
        "type" : "text"
      }
    ]
  },
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "subscript"
    },
    {
      "kind" : "text",
      "text" : "("
    },
    {
      "kind" : "externalParam",
      "text" : "safe"
    },
    {
      "kind" : "text",
      "text" : " _: "
    },
    {
      "kind" : "typeIdentifier",
      "text" : "Self"
    },
    {
      "kind" : "text",
      "text" : "."
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:Sl5IndexQa",
      "text" : "Index"
    },
    {
      "kind" : "text",
      "text" : ") -> "
    },
    {
      "kind" : "typeIdentifier",
      "text" : "Self"
    },
    {
      "kind" : "text",
      "text" : "."
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:ST7ElementQa",
      "text" : "Element"
    },
    {
      "kind" : "text",
      "text" : "?"
    }
  ],
  "identifier" : "doc:\/\/FzkExtensions\/documentation\/FzkExtensions\/Swift\/Collection\/subscript(safe:)",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "subscript(safe:)",
  "type" : "topic",
  "url" : "\/documentation\/fzkextensions\/swift\/collection\/subscript(safe:)"
},
"doc://FzkExtensions/documentation/FzkExtensions/Swift/Optional/unwrap()": {
  "abstract" : [
    {
      "text" : "Unwraps the ",
      "type" : "text"
    },
    {
      "code" : "Optional",
      "type" : "codeVoice"
    },
    {
      "text" : ", throwing if the value cannot be unwrapped.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "unwrap"
    },
    {
      "kind" : "text",
      "text" : "() "
    },
    {
      "kind" : "keyword",
      "text" : "throws"
    },
    {
      "kind" : "text",
      "text" : "("
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:13FzkExtensions11UnwrapErrorO",
      "text" : "UnwrapError"
    },
    {
      "kind" : "text",
      "text" : ") -> "
    },
    {
      "kind" : "typeIdentifier",
      "text" : "Wrapped"
    }
  ],
  "identifier" : "doc:\/\/FzkExtensions\/documentation\/FzkExtensions\/Swift\/Optional\/unwrap()",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "unwrap()",
  "type" : "topic",
  "url" : "\/documentation\/fzkextensions\/swift\/optional\/unwrap()"
},
"doc://FzkExtensions/documentation/FzkExtensions/Swift/Optional/unwrap(orThrow:)": {
  "abstract" : [
    {
      "text" : "Unwraps the ",
      "type" : "text"
    },
    {
      "code" : "Optional",
      "type" : "codeVoice"
    },
    {
      "text" : ", throwing if the value cannot be unwrapped.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "unwrap"
    },
    {
      "kind" : "text",
      "text" : "<"
    },
    {
      "kind" : "genericParameter",
      "text" : "E"
    },
    {
      "kind" : "text",
      "text" : ">("
    },
    {
      "kind" : "externalParam",
      "text" : "orThrow"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "attribute",
      "text" : "@autoclosure "
    },
    {
      "kind" : "text",
      "text" : "() -> "
    },
    {
      "kind" : "typeIdentifier",
      "text" : "E"
    },
    {
      "kind" : "text",
      "text" : ") "
    },
    {
      "kind" : "keyword",
      "text" : "throws"
    },
    {
      "kind" : "text",
      "text" : "("
    },
    {
      "kind" : "typeIdentifier",
      "text" : "E"
    },
    {
      "kind" : "text",
      "text" : ") -> "
    },
    {
      "kind" : "typeIdentifier",
      "text" : "Wrapped"
    }
  ],
  "identifier" : "doc:\/\/FzkExtensions\/documentation\/FzkExtensions\/Swift\/Optional\/unwrap(orThrow:)",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "unwrap(orThrow:)",
  "type" : "topic",
  "url" : "\/documentation\/fzkextensions\/swift\/optional\/unwrap(orthrow:)"
},
"doc://FzkExtensions/documentation/FzkExtensions/Swift/RangeReplaceableCollection/removing(at:)": {
  "abstract" : [
    {
      "text" : "Removes the element at the specified position and returns the resulting range.",
      "type" : "text"
    }
  ],
  "conformance" : {
    "availabilityPrefix" : [
      {
        "text" : "Available when",
        "type" : "text"
      }
    ],
    "conformancePrefix" : [
      {
        "text" : "Conforms when",
        "type" : "text"
      }
    ],
    "constraints" : [
      {
        "code" : "Self",
        "type" : "codeVoice"
      },
      {
        "text" : " is ",
        "type" : "text"
      },
      {
        "code" : "RangeReplaceableCollection",
        "type" : "codeVoice"
      },
      {
        "text" : ".",
        "type" : "text"
      }
    ]
  },
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "removing"
    },
    {
      "kind" : "text",
      "text" : "("
    },
    {
      "kind" : "externalParam",
      "text" : "at"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "text" : "Self"
    },
    {
      "kind" : "text",
      "text" : "."
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:Sl5IndexQa",
      "text" : "Index"
    },
    {
      "kind" : "text",
      "text" : ") -> "
    },
    {
      "kind" : "typeIdentifier",
      "text" : "Self"
    }
  ],
  "identifier" : "doc:\/\/FzkExtensions\/documentation\/FzkExtensions\/Swift\/RangeReplaceableCollection\/removing(at:)",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "removing(at:)",
  "type" : "topic",
  "url" : "\/documentation\/fzkextensions\/swift\/rangereplaceablecollection\/removing(at:)"
},
"doc://FzkExtensions/documentation/FzkExtensions/Swift/Sequence/sorted(by:)": {
  "abstract" : [
    {
      "text" : "Returns the elements of the sequence, sorted by the given KeyPath.",
      "type" : "text"
    }
  ],
  "conformance" : {
    "availabilityPrefix" : [
      {
        "text" : "Available when",
        "type" : "text"
      }
    ],
    "conformancePrefix" : [
      {
        "text" : "Conforms when",
        "type" : "text"
      }
    ],
    "constraints" : [
      {
        "code" : "Self",
        "type" : "codeVoice"
      },
      {
        "text" : " is ",
        "type" : "text"
      },
      {
        "code" : "Sequence",
        "type" : "codeVoice"
      },
      {
        "text" : ".",
        "type" : "text"
      }
    ]
  },
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "sorted"
    },
    {
      "kind" : "text",
      "text" : "("
    },
    {
      "kind" : "externalParam",
      "text" : "by"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:s7KeyPathC",
      "text" : "KeyPath"
    },
    {
      "kind" : "text",
      "text" : "<"
    },
    {
      "kind" : "typeIdentifier",
      "text" : "Self"
    },
    {
      "kind" : "text",
      "text" : "."
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:ST7ElementQa",
      "text" : "Element"
    },
    {
      "kind" : "text",
      "text" : ", "
    },
    {
      "kind" : "keyword",
      "text" : "some"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:SL",
      "text" : "Comparable"
    },
    {
      "kind" : "text",
      "text" : ">) -> ["
    },
    {
      "kind" : "typeIdentifier",
      "text" : "Self"
    },
    {
      "kind" : "text",
      "text" : "."
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:ST7ElementQa",
      "text" : "Element"
    },
    {
      "kind" : "text",
      "text" : "]"
    }
  ],
  "identifier" : "doc:\/\/FzkExtensions\/documentation\/FzkExtensions\/Swift\/Sequence\/sorted(by:)",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "sorted(by:)",
  "type" : "topic",
  "url" : "\/documentation\/fzkextensions\/swift\/sequence\/sorted(by:)"
},
"doc://FzkExtensions/documentation/FzkExtensions/Swift/Sequence/sorted(by:using:)": {
  "abstract" : [
    {
      "text" : "Returns the elements of the sequence, sorted by the given KeyPath using the given comparator function.",
      "type" : "text"
    }
  ],
  "conformance" : {
    "availabilityPrefix" : [
      {
        "text" : "Available when",
        "type" : "text"
      }
    ],
    "conformancePrefix" : [
      {
        "text" : "Conforms when",
        "type" : "text"
      }
    ],
    "constraints" : [
      {
        "code" : "Self",
        "type" : "codeVoice"
      },
      {
        "text" : " is ",
        "type" : "text"
      },
      {
        "code" : "Sequence",
        "type" : "codeVoice"
      },
      {
        "text" : ".",
        "type" : "text"
      }
    ]
  },
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "sorted"
    },
    {
      "kind" : "text",
      "text" : "<"
    },
    {
      "kind" : "genericParameter",
      "text" : "SortType"
    },
    {
      "kind" : "text",
      "text" : ">("
    },
    {
      "kind" : "externalParam",
      "text" : "by"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:s7KeyPathC",
      "text" : "KeyPath"
    },
    {
      "kind" : "text",
      "text" : "<"
    },
    {
      "kind" : "typeIdentifier",
      "text" : "Self"
    },
    {
      "kind" : "text",
      "text" : "."
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:ST7ElementQa",
      "text" : "Element"
    },
    {
      "kind" : "text",
      "text" : ", "
    },
    {
      "kind" : "typeIdentifier",
      "text" : "SortType"
    },
    {
      "kind" : "text",
      "text" : ">, "
    },
    {
      "kind" : "externalParam",
      "text" : "using"
    },
    {
      "kind" : "text",
      "text" : ": ("
    },
    {
      "kind" : "typeIdentifier",
      "text" : "SortType"
    },
    {
      "kind" : "text",
      "text" : ", "
    },
    {
      "kind" : "typeIdentifier",
      "text" : "SortType"
    },
    {
      "kind" : "text",
      "text" : ") "
    },
    {
      "kind" : "keyword",
      "text" : "throws"
    },
    {
      "kind" : "text",
      "text" : " -> "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:Sb",
      "text" : "Bool"
    },
    {
      "kind" : "text",
      "text" : ") "
    },
    {
      "kind" : "keyword",
      "text" : "rethrows"
    },
    {
      "kind" : "text",
      "text" : " -> ["
    },
    {
      "kind" : "typeIdentifier",
      "text" : "Self"
    },
    {
      "kind" : "text",
      "text" : "."
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:ST7ElementQa",
      "text" : "Element"
    },
    {
      "kind" : "text",
      "text" : "]"
    }
  ],
  "identifier" : "doc:\/\/FzkExtensions\/documentation\/FzkExtensions\/Swift\/Sequence\/sorted(by:using:)",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "sorted(by:using:)",
  "type" : "topic",
  "url" : "\/documentation\/fzkextensions\/swift\/sequence\/sorted(by:using:)"
},
"doc://FzkExtensions/documentation/FzkExtensions/UnwrapError": {
  "abstract" : [

  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "enum"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "UnwrapError"
    }
  ],
  "identifier" : "doc:\/\/FzkExtensions\/documentation\/FzkExtensions\/UnwrapError",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "UnwrapError"
    }
  ],
  "role" : "symbol",
  "title" : "UnwrapError",
  "type" : "topic",
  "url" : "\/documentation\/fzkextensions\/unwraperror"
},
"doc://FzkExtensions/documentation/FzkExtensions/__(_:_:)-6eyg3": {
  "abstract" : [
    {
      "text" : "Pipes the left-hand value into the function on the right-hand side and returns the result.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "|>"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "text",
      "text" : "<"
    },
    {
      "kind" : "genericParameter",
      "text" : "T"
    },
    {
      "kind" : "text",
      "text" : ", "
    },
    {
      "kind" : "genericParameter",
      "text" : "U"
    },
    {
      "kind" : "text",
      "text" : ">("
    },
    {
      "kind" : "typeIdentifier",
      "text" : "T"
    },
    {
      "kind" : "text",
      "text" : ", ("
    },
    {
      "kind" : "typeIdentifier",
      "text" : "T"
    },
    {
      "kind" : "text",
      "text" : ") "
    },
    {
      "kind" : "keyword",
      "text" : "async"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "keyword",
      "text" : "throws"
    },
    {
      "kind" : "text",
      "text" : " -> "
    },
    {
      "kind" : "typeIdentifier",
      "text" : "U"
    },
    {
      "kind" : "text",
      "text" : ") "
    },
    {
      "kind" : "keyword",
      "text" : "async"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "keyword",
      "text" : "rethrows"
    },
    {
      "kind" : "text",
      "text" : " -> "
    },
    {
      "kind" : "typeIdentifier",
      "text" : "U"
    }
  ],
  "identifier" : "doc:\/\/FzkExtensions\/documentation\/FzkExtensions\/__(_:_:)-6eyg3",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "|>(_:_:)",
  "type" : "topic",
  "url" : "\/documentation\/fzkextensions\/__(_:_:)-6eyg3"
},
"doc://FzkExtensions/documentation/FzkExtensions/__(_:_:)-7cl90": {
  "abstract" : [
    {
      "text" : "Pipes the left-hand value into the function on the right-hand side and returns the result.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "|>"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "text",
      "text" : "<"
    },
    {
      "kind" : "genericParameter",
      "text" : "T"
    },
    {
      "kind" : "text",
      "text" : ", "
    },
    {
      "kind" : "genericParameter",
      "text" : "U"
    },
    {
      "kind" : "text",
      "text" : ">("
    },
    {
      "kind" : "typeIdentifier",
      "text" : "T"
    },
    {
      "kind" : "text",
      "text" : ", ("
    },
    {
      "kind" : "typeIdentifier",
      "text" : "T"
    },
    {
      "kind" : "text",
      "text" : ") "
    },
    {
      "kind" : "keyword",
      "text" : "throws"
    },
    {
      "kind" : "text",
      "text" : " -> "
    },
    {
      "kind" : "typeIdentifier",
      "text" : "U"
    },
    {
      "kind" : "text",
      "text" : ") "
    },
    {
      "kind" : "keyword",
      "text" : "rethrows"
    },
    {
      "kind" : "text",
      "text" : " -> "
    },
    {
      "kind" : "typeIdentifier",
      "text" : "U"
    }
  ],
  "identifier" : "doc:\/\/FzkExtensions\/documentation\/FzkExtensions\/__(_:_:)-7cl90",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "|>(_:_:)",
  "type" : "topic",
  "url" : "\/documentation\/fzkextensions\/__(_:_:)-7cl90"
},
"doc://FzkExtensions/documentation/FzkExtensions/__=(_:_:)": {
  "abstract" : [
    {
      "text" : "Assigns the lhs if it is nil, otherwise it is unmodified.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "??="
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "text",
      "text" : "<"
    },
    {
      "kind" : "genericParameter",
      "text" : "T"
    },
    {
      "kind" : "text",
      "text" : ">("
    },
    {
      "kind" : "keyword",
      "text" : "inout"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "typeIdentifier",
      "text" : "T"
    },
    {
      "kind" : "text",
      "text" : "?, "
    },
    {
      "kind" : "attribute",
      "text" : "@autoclosure "
    },
    {
      "kind" : "text",
      "text" : "() "
    },
    {
      "kind" : "keyword",
      "text" : "throws"
    },
    {
      "kind" : "text",
      "text" : " -> "
    },
    {
      "kind" : "typeIdentifier",
      "text" : "T"
    },
    {
      "kind" : "text",
      "text" : ") "
    },
    {
      "kind" : "keyword",
      "text" : "rethrows"
    }
  ],
  "identifier" : "doc:\/\/FzkExtensions\/documentation\/FzkExtensions\/__=(_:_:)",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "??=(_:_:)",
  "type" : "topic",
  "url" : "\/documentation\/fzkextensions\/__=(_:_:)"
},
"doc://FzkExtensions/documentation/FzkExtensions/~(_:_:)": {
  "abstract" : [
    {
      "text" : "Configurator operator allowing the left-hand side to be modified by the function passed to the right-hand side.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "~"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "text",
      "text" : "<"
    },
    {
      "kind" : "genericParameter",
      "text" : "T"
    },
    {
      "kind" : "text",
      "text" : ">("
    },
    {
      "kind" : "typeIdentifier",
      "text" : "T"
    },
    {
      "kind" : "text",
      "text" : ", ("
    },
    {
      "kind" : "keyword",
      "text" : "inout"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "typeIdentifier",
      "text" : "T"
    },
    {
      "kind" : "text",
      "text" : ") "
    },
    {
      "kind" : "keyword",
      "text" : "throws"
    },
    {
      "kind" : "text",
      "text" : " -> "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:s4Voida",
      "text" : "Void"
    },
    {
      "kind" : "text",
      "text" : ") "
    },
    {
      "kind" : "keyword",
      "text" : "rethrows"
    },
    {
      "kind" : "text",
      "text" : " -> "
    },
    {
      "kind" : "typeIdentifier",
      "text" : "T"
    }
  ],
  "identifier" : "doc:\/\/FzkExtensions\/documentation\/FzkExtensions\/~(_:_:)",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "~(_:_:)",
  "type" : "topic",
  "url" : "\/documentation\/fzkextensions\/~(_:_:)"
},
"https://www.ietf.org/rfc/rfc3339": {
  "identifier" : "https:\/\/www.ietf.org\/rfc\/rfc3339",
  "title" : "RFC 3339",
  "titleInlineContent" : [
    {
      "text" : "RFC 3339",
      "type" : "text"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/www.ietf.org\/rfc\/rfc3339"
},
"https://www.iso.org/iso-8601-date-and-time-format.html": {
  "identifier" : "https:\/\/www.iso.org\/iso-8601-date-and-time-format.html",
  "title" : "ISO 8601",
  "titleInlineContent" : [
    {
      "text" : "ISO 8601",
      "type" : "text"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/www.iso.org\/iso-8601-date-and-time-format.html"
}
}
}